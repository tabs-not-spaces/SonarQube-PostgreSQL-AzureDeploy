{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "17713003354464714484"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "postgresAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username for PostgreSQL server"
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password for PostgreSQL server"
      }
    },
    "postgresServerName": {
      "type": "string",
      "defaultValue": "[format('sonarqube-postgresql-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "PostgreSQL server name"
      }
    },
    "databaseName": {
      "type": "string",
      "defaultValue": "sonarqube",
      "metadata": {
        "description": "Database name for SonarQube"
      }
    },
    "containerGroupName": {
      "type": "string",
      "defaultValue": "sonarqube-container-group",
      "metadata": {
        "description": "Container group name"
      }
    },
    "dockerHubUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Docker Hub username (optional, used only if useACR is false)"
      }
    },
    "dockerHubPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Docker Hub password/token (optional, used only if useACR is false)"
      }
    },
    "useACR": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to use Azure Container Registry instead of Docker Hub"
      }
    },
    "acrName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure Container Registry name (required if useACR is true)"
      }
    },
    "createACR": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Create new ACR or use existing ACR in the same resource group"
      }
    },
    "sonarQubeVersion": {
      "type": "string",
      "defaultValue": "community",
      "metadata": {
        "description": "SonarQube version tag"
      }
    },
    "caddyVersion": {
      "type": "string",
      "defaultValue": "alpine",
      "metadata": {
        "description": "Caddy image tag"
      }
    },
    "cpuCores": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "CPU cores for container group"
      }
    },
    "memoryInGb": {
      "type": "int",
      "defaultValue": 4,
      "metadata": {
        "description": "Memory in GB for container group"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "Application": "SonarQube",
        "Environment": "Production"
      },
      "metadata": {
        "description": "Tags to apply to all resources"
      }
    }
  },
  "resources": [
    {
      "condition": "[and(parameters('useACR'), parameters('createACR'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "acr-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "acrName": {
            "value": "[parameters('acrName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "8745421503968379278"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for the Azure Container Registry"
              }
            },
            "acrName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Azure Container Registry"
              }
            },
            "acrSku": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "SKU for the Azure Container Registry"
              }
            },
            "adminUserEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable admin user for the ACR"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to resources"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-07-01",
              "name": "[parameters('acrName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('acrSku')]"
              },
              "properties": {
                "adminUserEnabled": "[parameters('adminUserEnabled')]",
                "networkRuleSet": {
                  "defaultAction": "Allow"
                },
                "policies": {
                  "quarantinePolicy": {
                    "status": "disabled"
                  },
                  "trustPolicy": {
                    "type": "Notary",
                    "status": "disabled"
                  },
                  "retentionPolicy": {
                    "days": 7,
                    "status": "disabled"
                  },
                  "exportPolicy": {
                    "status": "enabled"
                  }
                },
                "encryption": {
                  "status": "disabled"
                },
                "dataEndpointEnabled": false,
                "publicNetworkAccess": "Enabled",
                "networkRuleBypassOptions": "AzureServices"
              }
            }
          ],
          "outputs": {
            "acrId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the ACR"
              },
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName'))]"
            },
            "acrName": {
              "type": "string",
              "metadata": {
                "description": "The name of the ACR"
              },
              "value": "[parameters('acrName')]"
            },
            "acrLoginServer": {
              "type": "string",
              "metadata": {
                "description": "The login server of the ACR"
              },
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), '2023-07-01').loginServer]"
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('useACR')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "managed-identity-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "identityName": {
            "value": "[format('{0}-identity', parameters('containerGroupName'))]"
          },
          "acrName": {
            "value": "[parameters('acrName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "4958961100052064730"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for the managed identity"
              }
            },
            "identityName": {
              "type": "string",
              "metadata": {
                "description": "Name of the user-assigned managed identity"
              }
            },
            "acrName": {
              "type": "string",
              "metadata": {
                "description": "Name of the ACR to assign pull permissions to"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to resources"
              }
            }
          },
          "variables": {
            "acrPullRoleDefinitionId": "7f951dda-4ed3-4680-a7ca-43fe172d538d"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('identityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('acrName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), variables('acrPullRoleDefinitionId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('acrPullRoleDefinitionId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
              ]
            }
          ],
          "outputs": {
            "identityId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the managed identity"
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the managed identity"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId]"
            },
            "clientId": {
              "type": "string",
              "metadata": {
                "description": "The client ID of the managed identity"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').clientId]"
            },
            "identityName": {
              "type": "string",
              "metadata": {
                "description": "The name of the managed identity"
              },
              "value": "[parameters('identityName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "postgresql-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "serverName": {
            "value": "[parameters('postgresServerName')]"
          },
          "adminUsername": {
            "value": "[parameters('postgresAdminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('postgresAdminPassword')]"
          },
          "databaseName": {
            "value": "[parameters('databaseName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "1147762150752595610"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for the PostgreSQL server"
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Name of the PostgreSQL server"
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Administrator username for PostgreSQL server"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Administrator password for PostgreSQL server"
              }
            },
            "databaseName": {
              "type": "string",
              "metadata": {
                "description": "Name of the database to create"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to resources"
              }
            },
            "postgresVersion": {
              "type": "string",
              "defaultValue": "14",
              "metadata": {
                "description": "PostgreSQL version"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard_B1ms",
              "metadata": {
                "description": "SKU name for PostgreSQL server"
              }
            },
            "skuTier": {
              "type": "string",
              "defaultValue": "Burstable",
              "metadata": {
                "description": "SKU tier for PostgreSQL server"
              }
            },
            "storageSizeGB": {
              "type": "int",
              "defaultValue": 32,
              "metadata": {
                "description": "Storage size in MB"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers",
              "apiVersion": "2023-12-01-preview",
              "name": "[parameters('serverName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
              },
              "properties": {
                "administratorLogin": "[parameters('adminUsername')]",
                "administratorLoginPassword": "[parameters('adminPassword')]",
                "version": "[parameters('postgresVersion')]",
                "storage": {
                  "storageSizeGB": "[parameters('storageSizeGB')]",
                  "autoGrow": "Enabled"
                },
                "backup": {
                  "backupRetentionDays": 7,
                  "geoRedundantBackup": "Disabled"
                },
                "highAvailability": {
                  "mode": "Disabled"
                },
                "network": {
                  "publicNetworkAccess": "Enabled"
                }
              }
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2023-12-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowAzureServices')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2023-12-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowAllIPs')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "255.255.255.255"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
              "apiVersion": "2023-12-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('databaseName'))]",
              "properties": {
                "charset": "UTF8",
                "collation": "en_US.utf8"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
              ]
            }
          ],
          "outputs": {
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "The name of the PostgreSQL server"
              },
              "value": "[parameters('serverName')]"
            },
            "serverFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the PostgreSQL server"
              },
              "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName')), '2023-12-01-preview').fullyQualifiedDomainName]"
            },
            "databaseName": {
              "type": "string",
              "metadata": {
                "description": "The database name"
              },
              "value": "[parameters('databaseName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-group-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "containerGroupName": {
            "value": "[parameters('containerGroupName')]"
          },
          "dockerHubUsername": {
            "value": "[parameters('dockerHubUsername')]"
          },
          "dockerHubPassword": {
            "value": "[parameters('dockerHubPassword')]"
          },
          "useACR": {
            "value": "[parameters('useACR')]"
          },
          "acrLoginServer": "[if(parameters('useACR'), if(parameters('createACR'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'acr-deployment'), '2022-09-01').outputs.acrLoginServer.value), createObject('value', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), '2023-07-01').loginServer)), createObject('value', ''))]",
          "managedIdentityId": "[if(parameters('useACR'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'managed-identity-deployment'), '2022-09-01').outputs.identityId.value), createObject('value', ''))]",
          "sonarQubeVersion": {
            "value": "[parameters('sonarQubeVersion')]"
          },
          "caddyVersion": {
            "value": "[parameters('caddyVersion')]"
          },
          "cpuCores": {
            "value": "[parameters('cpuCores')]"
          },
          "memoryInGb": {
            "value": "[parameters('memoryInGb')]"
          },
          "postgresServerName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'postgresql-deployment'), '2022-09-01').outputs.serverName.value]"
          },
          "postgresUsername": {
            "value": "[parameters('postgresAdminUsername')]"
          },
          "postgresPassword": {
            "value": "[parameters('postgresAdminPassword')]"
          },
          "databaseName": {
            "value": "[parameters('databaseName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "17369348824513765792"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for the container group"
              }
            },
            "containerGroupName": {
              "type": "string",
              "metadata": {
                "description": "Name of the container group"
              }
            },
            "dockerHubUsername": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Docker Hub username (optional, used only if useACR is false)"
              }
            },
            "dockerHubPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Docker Hub password/token (optional, used only if useACR is false)"
              }
            },
            "useACR": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Whether to use Azure Container Registry instead of Docker Hub"
              }
            },
            "acrLoginServer": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "ACR login server (required if useACR is true)"
              }
            },
            "managedIdentityId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Managed identity resource ID for ACR authentication (required if useACR is true)"
              }
            },
            "sonarQubeVersion": {
              "type": "string",
              "defaultValue": "community",
              "metadata": {
                "description": "SonarQube container image version"
              }
            },
            "caddyVersion": {
              "type": "string",
              "defaultValue": "alpine",
              "metadata": {
                "description": "Caddy container image version"
              }
            },
            "cpuCores": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "CPU cores for the container group"
              }
            },
            "memoryInGb": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Memory in GB for the container group"
              }
            },
            "postgresServerName": {
              "type": "string",
              "metadata": {
                "description": "PostgreSQL server name"
              }
            },
            "postgresUsername": {
              "type": "string",
              "metadata": {
                "description": "PostgreSQL username"
              }
            },
            "postgresPassword": {
              "type": "securestring",
              "metadata": {
                "description": "PostgreSQL password"
              }
            },
            "databaseName": {
              "type": "string",
              "metadata": {
                "description": "Database name"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to resources"
              }
            }
          },
          "variables": {
            "sonarQubeImage": "[if(parameters('useACR'), format('{0}/sonarqube:{1}', parameters('acrLoginServer'), parameters('sonarQubeVersion')), format('sonarqube:{0}', parameters('sonarQubeVersion')))]",
            "caddyImage": "[if(parameters('useACR'), format('{0}/caddy:{1}', parameters('acrLoginServer'), parameters('caddyVersion')), format('caddy:{0}', parameters('caddyVersion')))]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerInstance/containerGroups",
              "apiVersion": "2023-05-01",
              "name": "[parameters('containerGroupName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[if(parameters('useACR'), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('managedIdentityId')), createObject())), null())]",
              "properties": {
                "osType": "Linux",
                "restartPolicy": "Always",
                "ipAddress": {
                  "type": "Public",
                  "ports": [
                    {
                      "protocol": "TCP",
                      "port": 80
                    }
                  ],
                  "dnsNameLabel": "[format('{0}-{1}', parameters('containerGroupName'), uniqueString(resourceGroup().id))]"
                },
                "imageRegistryCredentials": "[if(parameters('useACR'), createArray(createObject('server', parameters('acrLoginServer'), 'identity', parameters('managedIdentityId'))), createArray(createObject('server', 'docker.io', 'username', parameters('dockerHubUsername'), 'password', parameters('dockerHubPassword'))))]",
                "containers": [
                  {
                    "name": "sonarqube",
                    "properties": {
                      "image": "[variables('sonarQubeImage')]",
                      "resources": {
                        "requests": {
                          "cpu": "[sub(parameters('cpuCores'), 1)]",
                          "memoryInGB": "[sub(parameters('memoryInGb'), 1)]"
                        }
                      },
                      "ports": [
                        {
                          "protocol": "TCP",
                          "port": 9000
                        }
                      ],
                      "environmentVariables": [
                        {
                          "name": "SONAR_JDBC_URL",
                          "value": "[format('jdbc:postgresql://{0}.postgres.database.azure.com:5432/{1}?sslmode=require', parameters('postgresServerName'), parameters('databaseName'))]"
                        },
                        {
                          "name": "SONAR_JDBC_USERNAME",
                          "value": "[parameters('postgresUsername')]"
                        },
                        {
                          "name": "SONAR_JDBC_PASSWORD",
                          "secureValue": "[parameters('postgresPassword')]"
                        },
                        {
                          "name": "SONAR_ES_BOOTSTRAP_CHECKS_DISABLE",
                          "value": "true"
                        }
                      ],
                      "volumeMounts": [
                        {
                          "name": "sonarqube-data",
                          "mountPath": "/opt/sonarqube/data"
                        },
                        {
                          "name": "sonarqube-logs",
                          "mountPath": "/opt/sonarqube/logs"
                        },
                        {
                          "name": "sonarqube-extensions",
                          "mountPath": "/opt/sonarqube/extensions"
                        }
                      ]
                    }
                  },
                  {
                    "name": "caddy",
                    "properties": {
                      "image": "[variables('caddyImage')]",
                      "resources": {
                        "requests": {
                          "cpu": "[json('0.5')]",
                          "memoryInGB": 1
                        }
                      },
                      "ports": [
                        {
                          "protocol": "TCP",
                          "port": 80
                        }
                      ],
                      "command": [
                        "/bin/sh",
                        "-c",
                        "echo \":80 { reverse_proxy localhost:9000 }\" > /etc/caddy/Caddyfile && caddy run --config /etc/caddy/Caddyfile"
                      ]
                    }
                  }
                ],
                "volumes": [
                  {
                    "name": "sonarqube-data",
                    "emptyDir": {}
                  },
                  {
                    "name": "sonarqube-logs",
                    "emptyDir": {}
                  },
                  {
                    "name": "sonarqube-extensions",
                    "emptyDir": {}
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[format('sonarqube{0}', uniqueString(resourceGroup().id))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "supportsHttpsTrafficOnly": true,
                "minimumTlsVersion": "TLS1_2"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/default/sonarqube-data', format('sonarqube{0}', uniqueString(resourceGroup().id)))]",
              "properties": {
                "shareQuota": 10
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('sonarqube{0}', uniqueString(resourceGroup().id)))]"
              ]
            }
          ],
          "outputs": {
            "sonarQubeUrl": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the SonarQube application"
              },
              "value": "[format('http://{0}', reference(resourceId('Microsoft.ContainerInstance/containerGroups', parameters('containerGroupName')), '2023-05-01').ipAddress.fqdn)]"
            },
            "publicIpAddress": {
              "type": "string",
              "metadata": {
                "description": "The public IP address of the container group"
              },
              "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups', parameters('containerGroupName')), '2023-05-01').ipAddress.ip]"
            },
            "containerGroupName": {
              "type": "string",
              "metadata": {
                "description": "The container group name"
              },
              "value": "[parameters('containerGroupName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'acr-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'managed-identity-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'postgresql-deployment')]"
      ]
    }
  ],
  "outputs": {
    "postgresServerFqdn": {
      "type": "string",
      "metadata": {
        "description": "PostgreSQL server FQDN"
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'postgresql-deployment'), '2022-09-01').outputs.serverFqdn.value]"
    },
    "sonarQubeUrl": {
      "type": "string",
      "metadata": {
        "description": "Container group FQDN"
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'container-group-deployment'), '2022-09-01').outputs.sonarQubeUrl.value]"
    },
    "publicIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Container group public IP"
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'container-group-deployment'), '2022-09-01').outputs.publicIpAddress.value]"
    },
    "acrLoginServer": {
      "type": "string",
      "metadata": {
        "description": "ACR login server (if ACR is used)"
      },
      "value": "[if(parameters('useACR'), if(parameters('createACR'), reference(resourceId('Microsoft.Resources/deployments', 'acr-deployment'), '2022-09-01').outputs.acrLoginServer.value, reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), '2023-07-01').loginServer), '')]"
    },
    "managedIdentityClientId": {
      "type": "string",
      "metadata": {
        "description": "Managed identity client ID (if ACR is used)"
      },
      "value": "[if(parameters('useACR'), reference(resourceId('Microsoft.Resources/deployments', 'managed-identity-deployment'), '2022-09-01').outputs.clientId.value, '')]"
    }
  }
}